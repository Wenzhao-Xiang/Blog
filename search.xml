<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GSoC2019 - Improve the performance of JavaScript version of OpenCV (OpenCV.js)</title>
      <link href="/Blog/2020/02/01/gsoc2019/"/>
      <url>/Blog/2020/02/01/gsoc2019/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/Blog/assets/css/APlayer.min.css"><script src="/Blog/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/Blog/assets/js/Meting.min.js"></script><!-- # [GSoC 2019] Improve the performance of JavaScript version of OpenCV (OpenCV.js) --><!-- #### Wenzhao-Xiang | [github](https://github.com/Wenzhao-Xiang) | [twitter](https://twitter.com/Wenzhao_Xiang) | [email](mailto:winzard35@gmail.com) --><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><ul><li><a href="https://summerofcode.withgoogle.com/projects/#5715812734730240" target="_blank" rel="noopener">Project Link</a></li><li>Proposal:  <a href="https://docs.google.com/document/d/1Nx3MDFnM47kumdyyUzju2xn3loiZnf0HsmhmCzAJfKo/edit?usp=sharing" target="_blank" rel="noopener">Improve the performance of JavaScript version of OpenCV (OpenCV.js)</a></li><li>Mentor: Ningxin Hu, Vitaly Tuzov</li><li>Organization: OpenCV</li></ul><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><a href="https://docs.opencv.org/3.4/df/d0a/tutorial_js_intro.html" target="_blank" rel="noopener">OpenCV.js</a> is a JavaScript binding for selected subset of OpenCV functions for the web platform. It allows emerging web applications with multimedia processing to benefit from the wide variety of vision functions available in OpenCV. OpenCV.js leverages Emscripten to compile OpenCV functions into asm.js or WebAssembly targets, and provides a JavaScript APIs for web application to access them.</p><p>However, now the performance of OpenCV.js still have a big gap with Native, and it can’t support real-time tasks very well, such as face detection and face recognition. The biggest reason is that the current version of OpenCV.js runs with single thread and no SIMD, which greatly wastes the parallel computing power of the CPU.</p><p>But at this time, WebAssembly can reduce the performance gap between Web and Native. WebAssembly now support multi-threading with Web Worker and shareArrayBuffer, and is going on supporting new v128 value types used for SIMD, which can both improve the parallel computing capability on Web.</p><p>Therefore, the main goal of this project is to speedup OpenCV.js by multi-threading and SIMD.</p><h2 id="Work-structure"><a href="#Work-structure" class="headerlink" title="Work structure"></a>Work structure</h2><h3 id="Create-the-base-of-OpenCV-js-performance-test"><a href="#Create-the-base-of-OpenCV-js-performance-test" class="headerlink" title="Create the base of OpenCV.js performance test"></a>Create the base of OpenCV.js performance test</h3><p><a href="https://benchmarkjs.com" target="_blank" rel="noopener">Benchmark.js</a> is a benchmarking library that supports high-resolution timers &amp; returns statistically significant results. And the OpenCV.js performance test tool is based on it. Now we add three kernels of imgproc module into these performance test, which are <code>cvtColor</code>, <code>Resize</code> and <code>Threshold</code>. And all the performance tests are based on native performance test.</p><p>To run performance tests, launch a local web server in &lt;build_dir&gt;/bin folder. For example, node http-server which serves on <code>localhost:8080</code>. If you want to test <code>threshold</code>, please navigate the web browser to <code>http://localhost:8080/perf/perf_imgproc/perf_threshold.html</code>. You need to input the test parameter like <code>(1920x1080, CV_8UC1, THRESH_BINARY)</code>, and then click the <code>Run</code> button to run the case. And if you don’t input the parameter, it will run all the cases of this kernel.</p><p>You can also run tests using Node.js. For example, run <code>threshold</code> with parameter <code>(1920x1080, CV_8UC1, THRESH_BINARY)</code>:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> bin/perf</span><br><span class="line">npm install</span><br><span class="line">node perf_threshold.js --test_param_filter=<span class="string">"(1920x1080, CV_8UC1, THRESH_BINARY)"</span></span><br></pre></td></tr></table></figure></div><h3 id="Optimize-the-OpenCV-js-performance-by-WebAssembly-threads"><a href="#Optimize-the-OpenCV-js-performance-by-WebAssembly-threads" class="headerlink" title="Optimize the OpenCV.js performance by WebAssembly threads"></a>Optimize the OpenCV.js performance by WebAssembly threads</h3><p>WebAssembly now support multi-threading with Web Worker and SharedArrayBuffer (i.e., <a href="https://github.com/WebAssembly/threads" target="_blank" rel="noopener">WebAssembly threads</a>). Developers are able to use Emscripten to translate the pthreads based native code to Web Workers and SharedArrayBuffer based WebAssembly code. So we leverage this capability to translate <a href="https://docs.opencv.org/3.4.1/d7/dff/tutorial_how_to_use_OpenCV_parallel_for_.html" target="_blank" rel="noopener">OpenCV pthreads API</a> implementation into equivalent WebAssembly code by using Web Workers with SharedArrayBuffer. The multithreading version of OpenCV.js will have a pool of Web Workers and will schedule a worker when a new thread is being spawn. And this optimization can only be used in browser as node.js have no Web Worker API.</p><p>We expose two new API <code>cv.parallel_pthreads_set_threads_num(number)</code> and <code>cv.parallel_pthreads_get_threads_num()</code>, so we can use the former to set threads number dynamically and use the latter to get the current threads number. And the default threads number is the logic core number of the device.</p><h3 id="Optimize-the-OpenCV-js-performance-by-WebAssembly-SIMD"><a href="#Optimize-the-OpenCV-js-performance-by-WebAssembly-SIMD" class="headerlink" title="Optimize the OpenCV.js performance by WebAssembly SIMD"></a>Optimize the OpenCV.js performance by WebAssembly SIMD</h3><p>WebAssembly is adding the support of SIMD128 instructions (i.e., <a href="https://github.com/WebAssembly/simd/blob/master/proposals/simd/SIMD.md" target="_blank" rel="noopener">WebAssembly SIMD</a>). This features has been landed in V8/Chromium behind a developer flag. On the tooling side, the WebAssembly SIMD builtins has been added to LLVM compiler and Emscripten has released the first version of WebAssembly intrinsics. So we can use Emscripten LLVM upstream backend to translate the native vectorization implementation to WebAssembly SIMD128 instructions and deploy them to browsers.</p><p>Today’s OpenCV Universal intrinsics implementation have multiple backends for different architectures, such as SSE, NEON, AXV and VSX. Therefore, we added a new WebAssembly SIMD backend by using LLVM WebAssembly builtins and WebAssembly intrinsics.</p><p>We also enabled the WebAssembly intrinsics tests by compiling the native intrinsics tests to WebAssembly. With this tool, we can easily test whether our WebAssembly backend implementation of Universal Intrinsics is right. And now it pass all the tests.</p><p>The SIMD optimization is experimental as WebAssembly SIMD is still in development. Therefore, the simd version of OpenCV.js built by latest LLVM upstream may not work with the stable browser or old version of Node.js. Please use the latest version of unstable browser or Node.js to get new features, like <code>Chrome Dev</code>.</p><h2 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h2><p>For OpenCV kernels, take <code>Threshold</code> kernel with parameter <code>(1920x1080, CV_8UC1, THRESH_BINARY)</code> as example:</p><p>OS: Ubuntu 16.04.5<br><br>Emscripten: 1.38.42, LLVM upstream backend<br><br>Browser: Chrome, Version 78.0.3880.4 (Official Build) dev (64-bit)<br><br>Hardware: Core(TM) i7-8700 CPU @ 3.20GHz with 12 logical cores:</p><table><thead><tr><th>OpenCV.js Build</th><th>Mean Time (ms)</th><th>Speedup (to scalar)</th></tr></thead><tbody><tr><td>scalar</td><td>1.164</td><td>1</td></tr><tr><td>threads</td><td>0.261</td><td>4.45</td></tr><tr><td>simd</td><td>0.123</td><td>9.46</td></tr><tr><td>threads + simd</td><td>0.039</td><td>29.84</td></tr></tbody></table><p>For real case, take OpenCV.js face recognition sample as example:</p><p>OS: Ubuntu Linux 16.04.5<br><br>Emscripten: 1.38.42, LLVM upstream backend<br><br>Browser: Chrome, Version 78.0.3880.4 (Official Build) dev (64-bit)<br><br>Hardware: Intel(R) Core(TM) i7-8700 CPU @ 3.20GHz with 12 logical cores</p><table><thead><tr><th>OpenCV.js Build</th><th>FPS</th><th>Speedup (to scalar)</th></tr></thead><tbody><tr><td>scalar</td><td>3</td><td>1</td></tr><tr><td>threads</td><td>10</td><td>3.33</td></tr><tr><td>simd</td><td>12</td><td>4</td></tr><tr><td>threads + simd</td><td>26</td><td>8.6</td></tr></tbody></table><h2 id="Future-Work"><a href="#Future-Work" class="headerlink" title="Future Work"></a>Future Work</h2><ol><li><p>Add more modules and kernels into performance test, like <code>core</code>, <code>feature2d</code>, <code>video</code> and so on.</p></li><li><p>Optimize the Universal Intrinsics WebAssembly backend with the development of WebAssembly SIMD.</p></li></ol><h2 id="OpenCV-js-Demos"><a href="#OpenCV-js-Demos" class="headerlink" title="OpenCV.js Demos"></a>OpenCV.js Demos</h2><p><a href="https://wenzhao-xiang.github.io/opencvjs/index.html">OpenCV.js Demos</a> (May need the latest version of Chrome-Dev)<br><br><a href="https://youtu.be/ertdEzqE6bI" target="_blank" rel="noopener">My video report for GSoC on Youtube</a></p><h2 id="Commits-List"><a href="#Commits-List" class="headerlink" title="Commits List"></a>Commits List</h2><p><a href="https://github.com/opencv/opencv/pull/15371" target="_blank" rel="noopener">The PR</a><br><br><a href="https://github.com/Wenzhao-Xiang/opencv/commit/82e98faa65ba070a83d6d040be778f2b1fab6e29" target="_blank" rel="noopener">The list of my commits</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencvjs </tag>
            
            <tag> webassembly </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
